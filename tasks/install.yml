---
- name: install | Block
  vars:
    __compose_install_dir: "{{ lookup('vars', __role_prefix + '_compose_install_dir') }}"
    __compose_project_root_dir: "{{ lookup('vars', __role_prefix + '_compose_project_root_dir') }}"
    __docker_compose_files: "{{ lookup('vars', __role_prefix + '_docker_compose_files') | default(omit) }}"
    __zfs_skip_snapshot: "{{ lookup('vars', __role_prefix + '_zfs_skip_snapshot', default=false) }}"
    __zfs_root_dataset: "{{ lookup('vars', __role_prefix + '_zfs_root_dataset') }}"
    __maintenance: "{{ lookup('vars', __role_prefix + '_maintenance', default=false) }}"
    __compose_project_dirs: "{{ lookup('vars', __role_prefix + '_compose_project_dirs') }}"
    __compose_content: "{{ lookup('vars', __role_prefix + '_compose_content') }}"
  block:
    - name: install | Create dataset for {{ __compose_project_name }}
      become: true
      community.general.zfs:
        name: "{{ __zfs_root_dataset }}{{ __dataset }}"
        state: present
      register: zfs_dataset
      when: ansible_zfs_datasets is defined and ansible_zfs_datasets | selectattr('name', '==', __zfs_root_dataset) | length
      loop: "{{ __datasets }}"
      loop_control:
        loop_var: __dataset
      vars:
        __datasets: "{{ [__compose_install_dir.dir, __compose_project_root_dir.dir] if __compose_install_dir.dir != __compose_project_root_dir.dir else [__compose_install_dir.dir] }}"

    - name: install | Create snapshot for datasets
      become: true
      community.general.zfs:
        name: "{{ __zfs_root_dataset }}{{ __dataset }}@ansible-{{ ansible_date_time.iso8601_basic_short }}"
        state: present
      when: "not __zfs_skip_snapshot and not __maintenance and ansible_zfs_datasets is defined and ansible_zfs_datasets | selectattr('name', '==', __zfs_root_dataset) | length"
      loop: "{{ __datasets }}"
      loop_control:
        loop_var: __dataset
      vars:
        __datasets: "{{ [__compose_install_dir.dir, __compose_project_root_dir.dir] if __compose_install_dir.dir != __compose_project_root_dir.dir else [__compose_install_dir.dir] }}"

    - name: install | Create directories for {{ __compose_project_name }}
      become: true
      ansible.builtin.file:
        path: "{{ __folder.value.dir | mandatory }}"
        state: directory
        owner: "{{ __folder.value.owner | default(compose_artificer_default_dir_owner) }}"
        group: "{{ __folder.value.group | default(compose_artificer_default_dir_group) }}"
        mode: "{{ __folder.value.mode | default(compose_artificer_default_dir_mode) }}"
        recurse: "{{ __folder.value.recurse | default(compose_artificer_default_dir_recurse) }}"
      register: _project_dir_creation
      loop: "{{ __compose_project_dirs | dict2items }}"
      loop_control:
        label: "{{ __folder.value.dir | mandatory }}"
        loop_var: __folder

    - name: install | Upload docker-compose files for {{ __compose_project_name }}
      become: true
      ansible.builtin.template:
        src: docker-compose.yml.j2
        dest: "{{ __compose_install_dir.dir }}/docker-compose.yml"
        owner: root
        group: root
        mode: "0600"
        backup: true
      register: compose_artificer_compose_file

    - name: install | Install UnRAID files for {{ __compose_project_name }}
      become: true
      ansible.builtin.import_tasks: install_unraid.yml
      when: ansible_distribution == 'Unraid'
  rescue:
    - name: install | An error occurred on installation
      ansible.builtin.debug:
        msg: An error occurred when installing {{ __compose_project_name }} - Task {{ ansible_failed_task.name }} failed

    - name: install | Check if compose file backup was created
      become: true
      ansible.builtin.stat:
        path: "{{ compose_artificer_compose_file.backup_file | default('/dummy/path') }}"
      register: compose_artificer_compose_file_backup
      when: compose_artificer_compose_file.failed is defined and compose_artificer_compose_file.failed

    - name: install | Restore compose file backup
      become: true
      ansible.builtin.copy:
        src: "{{ compose_artificer_compose_file.backup_file }}"
        dest: "{{ __compose_install_dir.dir }}/docker-compose.yml"
        owner: root
        group: root
        mode: "0600"
        remote_src: true
      when: compose_artificer_compose_file.failed is defined and compose_artificer_compose_file.failed and compose_artificer_compose_file_backup.stat.exists

    - name: install | Remove compose file backup
      become: true
      ansible.builtin.file:
        path: "{{ compose_artificer_compose_file.backup_file }}"
        state: absent
      when: compose_artificer_compose_file.failed is defined and compose_artificer_compose_file.failed and compose_artificer_compose_file_backup.stat.exists

    - name: install | Installation failed
      ansible.builtin.fail:
        msg: "{{ ansible_failed_task }}"
