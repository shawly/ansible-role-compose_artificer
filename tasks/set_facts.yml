---
# tasks file for shawly.compose_artificer

- name: set_facts | Gather facts, if not present
  ansible.builtin.setup:
  when: not ansible_facts

- name: set_facts | Assert mandatory vars are set
  ansible.builtin.assert:
    that:
      - compose_artificer_role_prefix is defined
      - compose_artificer_role_prefix != ''
      - compose_artificer_role_prefix != role_name
      - compose_artificer_compose_project_name is defined
      - compose_artificer_compose_project_name != ''
      - compose_artificer_compose_project_name != role_name
    fail_msg:
      - "compose_artificer_role_prefix must be set and must not be set to {{ role_name }}"
      - "compose_artificer_compose_project_name must be set and must not be set to {{ role_name }}"
    success_msg:
      - "compose_artificer_role_prefix is set to {{ compose_artificer_role_prefix }}"
      - "compose_artificer_compose_project_name is set to {{ compose_artificer_compose_project_name }}"

- name: set_facts | Set artificer vars
  ansible.builtin.set_fact:
    __role_prefix: "{{ compose_artificer_role_prefix }}"
    __compose_project_name: "{{ compose_artificer_compose_project_name }}"

- name: set_facts | Fetch OS dependent variables
  ansible.builtin.include_vars:
    file: "{{ item }}"
    name: __os_vars
  # noqa loop-var-prefix[missing]
  with_first_found:
    - files:
        - "{{ ansible_facts.distribution | lower }}_{{ ansible_facts.distribution_major_version | lower }}.yml"
        - "{{ ansible_facts.distribution | lower }}.yml"
        - "{{ ansible_facts.os_family | lower }}_{{ ansible_facts.distribution_major_version | lower }}.yml"
        - "{{ ansible_facts.os_family | lower }}.yml"
        - "{{ ((ansible_facts.os_family in ['RedHat', 'Debian', 'Suse', 'Gentoo', 'Archlinux', 'Mandrake', 'Solaris', 'Alpine', 'Slackware']) | bool) | ternary('linux.yml',
          omit) }}"
      skip: true

# we only override variables with our default, if they have not been specified already
# by default the lookup functions finds all varnames containing the string, therefore
# we add ^ and $ to denote start and end of string, so this returns only exact matches
- name: set_facts | Set OS dependent variables, if not already defined by user
  ansible.builtin.set_fact:
    # noqa var-naming[no-jinja]
    "{{ item.key }}": "{{ item.value }}"
  # noqa loop-var-prefix[missing]
  with_dict: "{{ __os_vars | default({}) }}"

- name: set_facts | Set default variables for role
  ansible.builtin.set_fact:
    # noqa var-naming[no-jinja]
    "{{ __role_prefix + __var.key }}": "{{ __var.value }}"
  when: not lookup('varnames', '^' + __role_prefix + __var.key + '$')
  loop_control:
    loop_var: __var
    label: "{{ __role_prefix + __var.key }}"
  loop: "{{ __variables | dict2items }}"
  vars:
    __variables:
      _compose_project_root_dir: "{{ __compose_artificer_default_compose_project_root_dir }}"
      _compose_install_dir: "{{ __compose_artificer_default_compose_install_dir }}"
      _compose_overrides: {}
      _default_service_template: "{{ compose_artificer_default_service_template }}"
      _zfs_snapshot: true
      _zfs_root_pool: "{{ zfs_root_pool | default(compose_artificer_default_zfs_root_pool) }}"
      _zfs_root_dataset: "{{ zfs_root_dataset | default(compose_artificer_default_zfs_root_dataset) }}"
      _traefik_domain: "{{ traefik_domain | default('') }}"
      _traefik_subdomain: "{{ __compose_project_name | replace('_', '-') }}"
      _traefik_port: "80"
      _maintenance: false

- name: set_facts | Unraid block
  when: ansible_distribution == 'Unraid'
  block:
    - name: set_facts | Set UnRAID specific variables for composeman
      ansible.builtin.set_fact:
        # noqa var-naming[no-jinja]
        "{{ __role_prefix + __var.key }}": "{{ __var.value }}"
      when: not lookup('varnames', '^' + __role_prefix + __var.key + '$')
      loop_control:
        loop_var: __var
        label: "{{ __role_prefix + __var.key }}"
      loop: "{{ __variables | dict2items }}"
      vars:
        __variables:
          _unraid_description: "{{ __compose_artificer_unraid_description }}"
          _unraid_icon: "{{ __compose_artificer_unraid_icon }}"
          _unraid_shell: "{{ __compose_artificer_unraid_shell }}"

    - name: set_facts | Create UnRAID service definition with labels
      ansible.builtin.set_fact:
        # noqa var-naming[no-jinja]
        "{{ __role_prefix }}_unraid_service":
          labels:
            net.unraid.docker.managed: composeman
            net.unraid.docker.icon: "{{ lookup('vars', __role_prefix + '_unraid_icon') }}"
            # TODO: determine webui url through traefik labels
            net.unraid.docker.webui: "{{ lookup('vars', __role_prefix + '_unraid_webui', default=omit) }}"
            net.unraid.docker.shell: "{{ lookup('vars', __role_prefix + '_unraid_shell') }}"

- name: set_facts | Set variables for project dirs
  ansible.builtin.set_fact:
    # noqa var-naming[no-jinja]
    "{{ item.key }}": "{{ item.value }}"
  when: not lookup('varnames', '^' + item.key + '$')
  # noqa loop-var-prefix[missing]
  with_dict: "{{ __compose_artificer_compose_project_dirs }}"
  vars:
    __compose_artificer_compose_project_dirs: >-
      {{
        {
          __role_prefix + '_compose_install_dir': lookup('vars', __role_prefix + '_compose_install_dir'),
          __role_prefix + '_compose_project_root_dir': lookup('vars', __role_prefix + '_compose_project_root_dir')
        } | ansible.builtin.combine(lookup('vars', __role_prefix + '_default_compose_project_dirs'), lookup('vars', __role_prefix + '_compose_project_dirs'))
      }}

- name: set_facts | Load docker-compose.yml
  ansible.builtin.include_vars:
    file: docker-compose.yml
    name: __docker_compose_vars

- name: set_facts | Build the list of updates to make
  ansible.builtin.set_fact:
    __docker_compose_updates: "{{ (__docker_compose_updates | default([{'path': '__docker_compose_vars', 'value': __docker_compose_vars}])) + entries }}"
  vars:
    entries:
      - path: __docker_compose_vars.services.{{ __service }}
        value: >-
          {{
            lookup('vars', __role_prefix + '_default_service_template') | combine((__unraid_service | default({})), __docker_compose_vars.services[__service], recursive=true)
          }}
  loop: "{{ __docker_compose_vars.services.keys() | list }}"
  loop_control:
    loop_var: __service

- name: set_facts | Update __docker_compose_vars
  ansible.utils.update_fact:
    updates: "{{ __docker_compose_updates }}"
  register: __updated
  changed_when: false

- name: set_facts | Merge overrides
  ansible.builtin.set_fact:
    # noqa var-naming[no-jinja]
    "{{ __role_prefix + '_compose_content' }}": "{{ __updated.__docker_compose_vars | combine(__compose_overrides, recursive=true, list_merge='append_rp') }}"
  vars:
    __compose_overrides: "{{ lookup('vars', __role_prefix + '_compose_overrides') | default({}) }}"

- name: set_facts | Set compose project dirs variable
  ansible.builtin.set_fact:
    # noqa var-naming[no-jinja]
    "{{ __role_prefix + '_compose_project_dirs' }}": >-
      {{
        __compose_artificer_default_compose_project_dirs | ansible.builtin.combine(__role_default_compose_project_dirs, __role_compose_project_dirs)
      }}
  vars:
    __compose_artificer_default_compose_project_dirs: >-
      {{
        {
          __role_prefix + '_compose_install_dir': lookup('vars', __role_prefix + '_compose_install_dir'),
          __role_prefix + '_compose_project_root_dir': lookup('vars', __role_prefix + '_compose_project_root_dir')
        }
      }}
    __role_default_compose_project_dirs: "{{ lookup('vars', __role_prefix + '_default_compose_project_dirs', default={}) }}"
    __role_compose_project_dirs: "{{ lookup('vars', __role_prefix + '_compose_project_dirs', default={}) }}"

- name: set_facts | Override variables for project dirs
  ansible.builtin.set_fact:
    # noqa var-naming[no-jinja]
    "{{ item.key }}": "{{ item.value }}"
  # noqa loop-var-prefix[missing]
  with_dict: "{{ lookup('vars', __role_prefix + '_compose_project_dirs') | default({}) }}"

- name: set_facts | Pretty print docker-compose.yml
  ansible.builtin.debug:
    msg: "{{ msg.split('\n') }}"
    verbosity: 1
  vars:
    msg: "{{ lookup('vars', __role_prefix + '_compose_content') | to_nice_yaml(indent=2) }}"

- name: set_facts | Reset all vars
  ansible.builtin.set_fact:
    __all_vars: {}
  no_log: true

- name: set_facts | Gather all vars
  ansible.builtin.set_fact:
    __all_vars: "{{ (__all_vars | default({})) | combine({__var: lookup('vars', __var)}) }}"
  loop: "{{ query('varnames', '^(' + __role_prefix + '|compose_artificer)_.+$') }}"
  loop_control:
    loop_var: __var
  no_log: true

- name: set_facts | Pretty print vars
  ansible.builtin.debug:
    var: __all_vars
    verbosity: 2
