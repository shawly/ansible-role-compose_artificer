---
- name: install_btrfs | Block
  vars:
    __btrfs_snapshot_timestamp: "{{ ansible_date_time.iso8601_basic }}"
    __btrfs_skip_snapshot: "{{ lookup('vars', __compose_artificer_parent_role_prefix + '_btrfs_skip_snapshot', default=false) }}"
    __btrfs_filesystem_label: "{{ lookup('vars', __compose_artificer_parent_role_prefix + '_btrfs_filesystem_label') }}"
    __btrfs_subvolume_prefix: "{{ lookup('vars', __compose_artificer_parent_role_prefix + '_btrfs_subvolume_prefix') }}"
    __btrfs_subvolumes: "{{ [__compose_install_dir.dir, __compose_project_root_dir.dir] if __compose_install_dir.dir != __compose_project_root_dir.dir else [__compose_install_dir.dir] }}"
    __btrfs_additional_subvolumes: "{{ lookup('vars', __compose_artificer_parent_role_prefix + '_btrfs_additional_subvolumes', default=[]) }}"
    __btrfs_mount_options: "{{ lookup('vars', __compose_artificer_parent_role_prefix + '_btrfs_mount_options', default={}) }}"
    __btrfs_default_mount_options: "{{ lookup('vars', __compose_artificer_parent_role_prefix + '_btrfs_default_mount_options', default='defaults') }}"
  block:
    - name: install_btrfs | Create subvolume for {{ __compose_artificer_compose_project_name }}
      become: true
      community.general.btrfs_subvolume:
        name: "{{ __btrfs_subvolume_prefix }}{{ __subvolume_path | regex_replace('^/', '') | replace('/', '-') }}"
        state: present
        filesystem_label: "{{ __btrfs_filesystem_label }}"
      when:
        - __compose_artificer_btrfs_info is defined
        - __compose_artificer_btrfs_info.filesystems is defined
        - __compose_artificer_btrfs_info.filesystems | selectattr('label', '==', __btrfs_filesystem_label) | length > 0
      loop: "{{ __all_subvolumes }}"
      loop_control:
        loop_var: __subvolume_path
      vars:
        __all_subvolumes: "{{ __btrfs_subvolumes + __btrfs_additional_subvolumes | sort }}"
      register: __btrfs_subvolume_create_results

    - name: install_btrfs | Create snapshot of subvolumes for {{ __compose_artificer_compose_project_name }}
      become: true
      community.general.btrfs_subvolume:
        name: "{{ __target_subvolume.path | regex_replace('^/', '') }}.snap.{{ __btrfs_snapshot_timestamp }}"
        state: present
        snapshot_source: "{{ __target_subvolume.path | regex_replace('^/', '') }}"
        filesystem_label: "{{ __btrfs_filesystem_label }}"
      when:
        - not __btrfs_skip_snapshot
        - not __maintenance
        - __btrfs_subvolume_create_results is defined
        - __subvolume_create_result.target_subvolume_id is defined
        - __target_subvolume is defined
      loop: "{{ __btrfs_subvolume_create_results.results | default([]) }}"
      loop_control:
        loop_var: __subvolume_create_result
      vars:
        # Find the target subvolume by its ID and get its path
        __target_subvolume: "{{ __subvolume_create_result.filesystem.subvolumes | selectattr('id', '==', __subvolume_create_result.target_subvolume_id) | first }}"
      register: __btrfs_snapshot_create_results

    - name: install_btrfs | Make snapshot readonly for {{ __compose_artificer_compose_project_name }}
      become: true
      ansible.builtin.command:
        cmd: "btrfs property set {{ __snapshot_mountpoint }}{{ __snapshot_subvolume.path }} ro true"
      changed_when: false
      when:
        - __btrfs_snapshot_create_results is defined
        - __snapshot_create_result.changed is defined
        - __snapshot_create_result.changed
        - __snapshot_create_result.target_subvolume_id is defined
        - __snapshot_mountpoint is defined
        - __snapshot_mountpoint | length > 0
      loop: "{{ __btrfs_snapshot_create_results.results | default([]) }}"
      loop_control:
        loop_var: __snapshot_create_result
      vars:
        # Find the snapshot subvolume by its ID
        __snapshot_subvolume: "{{ __snapshot_create_result.filesystem.subvolumes | selectattr('id', '==', __snapshot_create_result.target_subvolume_id) | first }}"
        # Get mountpoint: either from snapshot itself or from its parent if the snapshot has no mountpoints
        __snapshot_mountpoint: >-
          {{
            __snapshot_subvolume.mountpoints | first if __snapshot_subvolume.mountpoints | length > 0
            else (__snapshot_create_result.filesystem.subvolumes | selectattr('id', '==', __snapshot_subvolume.parent) | first).mountpoints | first
          }}

    - name: install_btrfs | Create mountpoints for btrfs subvolumes for {{ __compose_artificer_compose_project_name }}
      become: true
      ansible.posix.mount:
        path: "{{ __subvolume_create_result.__subvolume_path }}"
        src: "UUID={{ __subvolume_create_result.filesystem.uuid }}"
        state: mounted
        fstype: btrfs
        passno: 2
        opts: "subvol={{ __target_subvolume.path | regex_replace('^/', '') }},{{ __btrfs_mount_options[__subvolume_create_result.__subvolume_path] | default(__btrfs_default_mount_options) }}"
      when:
        - __btrfs_subvolume_create_results is defined
        - __subvolume_create_result.target_subvolume_id is defined
        - __target_subvolume is defined
      loop: "{{ __btrfs_subvolume_create_results.results | default([]) }}"
      loop_control:
        loop_var: __subvolume_create_result
      vars:
        # Find the target subvolume by its ID and get its path
        __target_subvolume: "{{ __subvolume_create_result.filesystem.subvolumes | selectattr('id', '==', __subvolume_create_result.target_subvolume_id) | first }}"
